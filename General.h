
#ifndef _GENERAL_H_
#define _GENERAL_H_

#define VERSION_SOFT_MAJ    (1)
#define VERSION_SOFT_MIN    (0)


#define ADRESSE_I2C_dsPIC1	(0x54>>1)
#define ADRESSE_I2C_dsPIC2	(0x56>>1)


#define dsPIC1
#ifdef dsPIC1
    #define ADRESSE_I2C_dsPIC ADRESSE_I2C_dsPIC1
#else
    #define ADRESSE_I2C_dsPIC ADRESSE_I2C_dsPIC2
#endif




#define ENTER_CRITICAL_SECTION_I2C() { _SI2C1IE = 0; }
#define LEAVE_CRITICAL_SECTION_I2C() { _SI2C1IE = 1; }


typedef  enum {
    READ_WRITE = 0,
    READ_ONLY
}T_TYPE_REGISTRE;    


typedef enum {
    REG_VERSION_SOFT_MAJ = 0,
    REG_VERSION_SOFT_MIN,
    REG_PTR_REG_LECTURE_I2C,
    REG_NBRE_REGISTRES_LECTURE_I2C,
    REG_EANA_VBAT_H,
    REG_EANA_VBAT_L,
    REG_EANA_MEAS_CURR_VBAT_H,
    REG_EANA_MEAS_CURR_VBAT_L,
    REG_EANA_MEAS_CURR_1_H,
    REG_EANA_MEAS_CURR_1_L,
    REG_EANA_MEAS_CURR_2_H,
    REG_EANA_MEAS_CURR_2_L,
    REG_STOR_1,
    REG_STOR_2,
    REG_STOR_3,
    REG_STOR_4,
    REG_STOR_5,
    REG_STOR_6,
    REG_STOR_7,
    REG_STOR_8,
    REG_STOR_PGED,
    REG_STOR_PGEC,
    REG_CALIB_BATTERY_VOLTAGE_PHYS_POINT_1_H,
    REG_CALIB_BATTERY_VOLTAGE_PHYS_POINT_1_L,
    REG_CALIB_BATTERY_VOLTAGE_PHYS_POINT_2_H,
    REG_CALIB_BATTERY_VOLTAGE_PHYS_POINT_2_L,
    REG_CALIB_GLOBAL_CURRENT_PHYS_POINT_1_H,
    REG_CALIB_GLOBAL_CURRENT_PHYS_POINT_1_L,
    REG_CALIB_GLOBAL_CURRENT_PHYS_POINT_2_H,
    REG_CALIB_GLOBAL_CURRENT_PHYS_POINT_2_L,
    REG_CALIB_CURRENT_OUT1_PHYS_POINT_1_H,
    REG_CALIB_CURRENT_OUT1_PHYS_POINT_1_L,
    REG_CALIB_CURRENT_OUT1_PHYS_POINT_2_H,
    REG_CALIB_CURRENT_OUT1_PHYS_POINT_2_L,
    REG_CALIB_CURRENT_OUT2_PHYS_POINT_1_H,
    REG_CALIB_CURRENT_OUT2_PHYS_POINT_1_L,
    REG_CALIB_CURRENT_OUT2_PHYS_POINT_2_H,
    REG_CALIB_CURRENT_OUT2_PHYS_POINT_2_L,
            
    MAX_REGISTRES_NUMBER
    
}T_REG_ADDRESS;    

typedef struct {
    unsigned char   val;
    unsigned char   new_data;
    T_TYPE_REGISTRE type_read_write;
}T_dsPIC_REGISTER;    


extern T_dsPIC_REGISTER dsPIC_reg[];
extern unsigned short cptPerteComMaster;

#endif
// End


